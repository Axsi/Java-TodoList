#PostgreSQL Configuration for database connection
spring.datasource.url=jdbc:postgresql://localhost:5432/todo
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

#Keep the connection alive if idle for a long time (needed in production)
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.validation-query=SELECT 1

#JPA
#Show or not log for each sql query
spring.jpa.show-sql=true

#Hibernate ddl auto (create, create-drop, update, none): with "create-drop" the database schema will be automatically
#created afresh for every start of application (you really would not want this in production, instead you would want
#run-validate which is going to validate your database schema to your jpa) none option turns off automatic schema creation

#had this set to none initially but would not create tables, set it to create then it created the tables...also you might get some warnings when you first setup the tables
#as it will try to find the tables you want to create to see if we can drop then if they exists,  if no tables yet then you get warning. I believe using UPDATE instead solves this problem and it creates the tables
spring.jpa.hibernate.ddl-auto=update

#Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

#the schema path that needs to be initialized(though you did setup another option so not sure if you need this)
spring.datasource.schema=classpath:schema

#Tomcat connection pool
spring.datasource.tomcat.initial-size= 5
spring.datasource.tomcat.max-wait= 20000
spring.datasource.tomcat.max-active= 2
spring.datasource.tomcat.max-idle= 2
spring.datasource.tomcat.min-idle= 2
spring.datasource.tomcat.default-auto-commit=true
